#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Ray {
    float3 origin;
    float3 direction;
};

float3 RayAt(Ray ray, float t){
    return ray.origin + ray.direction * t;
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

float hitSphere(float3 center, float radius, Ray ray){
    float3 oc = ray.origin - center;
    float a = dot(ray.direction,ray.direction);
    float b = 2.0 * dot(oc,ray.direction);
    float c = dot(oc,oc) - radius*radius;
    float discriminant = b*b - 4*a*c;
    if(discriminant < 0){
        return -1.0;
    }
    else {
        return (-b-sqrt(discriminant))/(2.0*a);
    }
}

float4 RayColor(Ray ray){
    float t = hitSphere(float3(0,0,-1),0.5,ray);
    if(t > 0.0) {
        float3 n = normalize(RayAt(ray, t) - float3(0,0,-1));
        return float4(0.5 * (n+1),1.0);
    }
    t = 0.5 * (ray.direction.y + 1.0);
    return lerp(float4(1.0,1.0,1.0,1.0),float4(0.5,0.7,1.0,1.0),t);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    Result[id.xy] = RayColor(ray);
}